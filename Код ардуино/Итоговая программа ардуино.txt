#include <AccelStepper.h>

#define enablePin 98237456987324568982347

#define stepper1DirPin 1
#define stepper1StepPin 2
#define stepper2DirPin 3
#define stepper2StepPin 4

#define electroMagnetPin 1231267


#define stepsForOneTurn 200  // Это у nema 17

#define stepByOneCell 200  // Высчитать длину шага и обмотки - [сторона клетки(3,5см) / длина окружности(шкива) * кол-во шагов за оборот(stepsForOneTurn) ]
// для проверки выставил 200

// Матрица 10 на 16

int stepsArrayX[] = { 0, stepByOneCell, stepByOneCell * 2, stepByOneCell * 3, stepByOneCell * 4, stepByOneCell * 5, stepByOneCell * 6, stepByOneCell * 7, stepByOneCell * 8, stepByOneCell * 9, stepByOneCell * 10, stepByOneCell * 11, stepByOneCell * 12, stepByOneCell * 13, stepByOneCell * 14, stepByOneCell * 15 };
int stepsArrayY[] = { 0, stepByOneCell, stepByOneCell * 2, stepByOneCell * 3, stepByOneCell * 4, stepByOneCell * 5, stepByOneCell * 6, stepByOneCell * 7, stepByOneCell * 8, stepByOneCell * 9 };


AccelStepper StepperX(1, stepper1StepPin, stepper1DirPin);  // 1 - режим "external driver" (A4988)
AccelStepper StepperY(1, stepper2StepPin, stepper2DirPin);  // 1 - режим "external driver" (A4988)


#define masLength 50

int masX[masLength];
int masY[masLength];

int crutchCounter = 0;

bool magnetFlag = false;

void setup() {
    Serial.begin(9600);

    StepperX.setMaxSpeed(1000);     //устанавливаем максимальную скорость вращения ротора двигателя (шагов/секунду)
    StepperX.setSpeed(200);

    StepperY.setMaxSpeed(1000);     //устанавливаем максимальную скорость вращения ротора двигателя (шагов/секунду)
    StepperY.setSpeed(200);

    pinMode(enablePin, OUTPUT);
    digitalWrite(enablePin, LOW); // По крайней мере для CNC шилда нужен LOW сигнал для начала работы

    pinMode(electroMagnetPin, OUTPUT);
    digitalWrite(electroMagnetPin, LOW);
}

void loop() {
    if (Serial.available() > 0) {
        String incomingString = Serial.readString();
        Serial.println(incomingString);

        int index1;
        for (int i = 0; i < (incomingString.length()); i++) { // Т.к. sizeof возвращает вес, а не размер массива
            if (incomingString.charAt(i) == '(') { index1 = i; }
            if (incomingString.charAt(i) == ')') {
                String moveString;
                int counter = 0;
                for (int j = index1; j < i+1; j++) {
                    moveString.concat(incomingString.charAt(j));
                    counter++;
                }

                int inputX = 0;  // Тут подаётся индекс для шаговика х
                int inputY = 0;  // Тут подаётся индекс для шаговика y

                char charY = moveString.charAt(1);
                inputY = charY - '0';  // мощный перевод из char в int

                if (moveString.length() == 6) {
                    char charX = moveString.charAt(4);
                    inputX = charX - '0';
                } else if (moveString.length() == 7) {
                    char charX1 = moveString.charAt(4);
                    char charX2 = moveString.charAt(5);
                    inputX = (charX1 - '0') * 10 + (charX2 - '0');
                } else {
                    Serial.println("Чухня происходит какая-то");
                    return;
                }

                masX[crutchCounter] = inputX;
                masY[crutchCounter] = inputY;

                crutchCounter++;


            }
        }
    }

    if (crutchCounter != 0 && StepperX.distanceToGo() == 0 && StepperY.distanceToGo() == 0) {
        StepperX.moveTo(stepsArrayX[masX[0]]);
        StepperY.moveTo(stepsArrayY[masY[0]]);
        for (int i = 0; i < (masLength - 1); i++) {
            byte temp = masX[i];
            masX[i] = masX[i+1];
            masX[i+1] = temp;
            temp = masY[i];
            masY[i] = masY[i+1];
            masY[i+1] = temp;
        }
        crutchCounter--;

        if (magnetFlag) {
            digitalWrite(electroMagnetPin, HIGH);
        } else {
            digitalWrite(electroMagnetPin, LOW);
        }
        magnetFlag = !magnetFlag;

    }

    StepperX.runSpeedToPosition();
    StepperY.runSpeedToPosition();
}

